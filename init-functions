#!/bin/sh

# init-functions: LSB compliant library for system initialization scripts
#    Copyright (C) 2014 Alfredo Mungo <chimeranet89@gmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

[[ -z $LOGFILE ]] && LOGFILE=/var/log/rc

##
## Synopsis: log_success_msg msg
##
## msg:		Message to be logged
##
function log_success_msg () {
	local msg="SUCCESS: $1"

	echo "$msg" >>$LOGFILE
}

##
## Synopsis: log_warning_msg msg
##
## msg:		Message to be logged
##
function log_warning_msg () {
	local msg="WARNING: $1"
	
	echo ">> $msg" >&2
	echo "$msg" >>$LOGFILE
}

##
## Synopsis: log_failure_msg msg
##
## msg:		Message to be logged
##
function log_failure_msg () {
	local msg="ERROR: $1"

	echo ">> $msg" >&2
	echo "$msg" >>$LOGFILE
}

##
## Synopsis: start_daemon [-f] [-n nicelevel] [-p pidfile] pathname [args...]
##
## -f:			      Start daemon even if another instance is already running
## -n nicelevel:	Run with `nicelevel` nice level
## -p pidfile:    Use `pidfile` as the PID file for the daemon
## pathname:		  Path to the daemon executable
## args:		      Arguments to be passed to the daemon
function start_daemon () {
	# See http://refspecs.linuxfoundation.org/LSB_4.1.0/LSB-Core-generic/LSB-Core-generic/iniscrptfunc.html
  local parms=($*)
  local i=0
  local pidfile
  local nicelevel=0
  local pids
  local proc_path
  local proc_args=()
  local force=no

  while [[ $i < ${#parms[*]} ]]; do # Scan $parms
    local parm=${parms[$i]}
    local switch_found=no

    if [[ "$parm" == '-p' ]] && [[ -z "$proc_path" ]]; then
      ((i++))
      pidfile=${parms[$i]}
      switch_found=yes
    fi

    if [[ "$parm" == '-n' ]] && [[ -z "$proc_path" ]]; then
      ((i++))
      nicelevel=${parms[$i]}
      switch_found=yes
    fi

    if [[ "$parm" == '-f' ]] && [[ -z "$proc_path" ]]; then
      force=yes
      switch_found=yes
    fi

    if [[ ${parm:0:1} == '-' ]] && [[ ! $switch_found == yes ]] && [[ -z "$proc_path" ]]; then
      log_failure_msg "start_daemon(): Invalid parameter $parm"
      return 1
    fi

    [[ $switch_found == 'no' ]] && [[ -z "$proc_path" ]] && proc_path="$parm"
    [[ $parm_found == 'no' ]] && [[ -n "$proc_path" ]] && proc_args="$proc_args $parm"

    ((i++))
  done

  # Check whether a daemon has been specified
  if [[ -z "$proc_path" ]]; then
    log_failure_msg "start_daemon(): No executable specified"
    return 1
  fi

  # Set default PID file if none specified
  [[ -z "$pidfile" ]] && pidfile=/var/run/$(basename "$proc_path").pid

  # Read PIDs
  [[ -r "$pidfile" ]] && pids="$(pidofproc -p "$pidfile" "$proc_path")"

  # Do not run the daemon if already running and not asked to force-run
  [[ -n "$pids" ]] && [[ $force == no ]] && return 0

  # Run the daemon
  local pid=$(bash -c "nice -n $nicelevel $proc_path $proc_args 0</dev/null 1>/dev/null 2>/dev/null & echo \$!" 2>/dev/null)

  # Save the new PID
  pids="$pids $pid"
  pids="${pids/# /}"
  echo $pids >$pidfile
}

##
## Synopsis: killproc [-p pidfile] pathname [signal]
##
## -p pidfile:		PID file of the process
## pathname:		Path to the process executable
## signal:		Signal to send to the process
##
## NOTE: If no signal is specified, the default behaviour is to send SIGTERM,
##       wait for 5 seconds and then send SIGKILL.
function killproc () {
	# See http://refspecs.linuxfoundation.org/LSB_4.1.0/LSB-Core-generic/LSB-Core-generic/iniscrptfunc.html
  local parms=($*)
  local pidfile
  local pids
  local proc_path
  local sig
  local i=0
  
  while [[ $i < ${#parms[*]} ]]; do # Scan $parms
    local parm=${parms[$i]}
    local switch_found=no

    if [[ "$parm" == '-p' ]] && [[ -z "$proc_path" ]]; then
      ((i++))
      pidfile=${parms[$i]}
      switch_found=yes
    fi

    if [[ ${parm:0:1} == '-' ]] && [[ ! $switch_found == yes ]] && [[ -z "$proc_path" ]]; then
      log_failure_msg "killproc(): Invalid parameter $parm"
      return 1
    fi

    [[ $switch_found == 'no' ]] && [[ -z "$proc_path" ]] && proc_path="$parm"
    [[ $switch_found == 'no' ]] && [[ -n "$proc_path" ]] && [[ -z "$sig" ]] && sig="$parm"

    ((i++))
  done

  # Set default PID file if none specified
  [[ -z "$pidfile" ]] && pidfile=/var/run/$(basename "$proc_path").pid

  # Read PIDs
  [[ -r "$pidfile" ]] && pids="$(pidofproc -p "$pidfile" "$proc_path")"

  # Kill PIDs
  if [[ -n "$pids" ]]; then
    for pid in $pids; do
      if [[ -n "$sig" ]]; then # Send specified signal
        kill $sig $pid
      else # No signal specified, default behaviour
        kill -SIGTERM -- $pid
        
        for (( i=0 ; i<5 ; i++ )); do
          [[ ! -e /proc/$pid ]] && continue 2
          sleep 1
        done

        kill -SIGKILL -- $pid
      fi
    done
  else # None running
    return 0
  fi
}

##
## Synopsis: pidofproc [-p pidfile] pathname
##
## -p pidfile:		PID file of the process
## pathname:		Path to the process executable
##
function pidofproc () {
	# See http://refspecs.linuxfoundation.org/LSB_4.1.0/LSB-Core-generic/LSB-Core-generic/iniscrptfunc.html
  local parms=($*)
  local pidfile
  local pids
  local proc_path
  local i=0
  
  while [[ $i < ${#parms[*]} ]]; do # Scan $parms
    local parm=${parms[$i]}
    local switch_found=no

    if [[ "$parm" == '-p' ]] && [[ -z "$proc_path" ]]; then
      ((i++))
      pidfile=${parms[$i]}
      switch_found=yes
    fi

    if [[ ${parm:0:1} == '-' ]] && [[ ! $switch_found == yes ]] && [[ -z "$proc_path" ]]; then
      log_failure_msg "pidofproc(): Invalid parameter $parm"
      return 1
    fi

    if [[ $switch_found == 'no' ]] && [[ -z "$proc_path" ]]; then
      proc_path="$parm"
    fi

    ((i++))
  done

  # Set default PID file if none specified
  [[ -z "$pidfile" ]] && pidfile=/var/run/$(basename "$proc_path").pid

  # Read PIDs
  [[ -r "$pidfile" ]] && pids=($(sed -n '1{p;q}' $pidfile))

  # Output running PIDs
  local firstpid=yes
  for pid in ${pids[@]}; do
    if [[ -e /proc/$pid ]]; then
      if [[ $firstpid == yes ]]; then
        echo -n "$pid"
        firstpid=no
      else
        echo -n " $pid"
      fi
    fi
  done

  echo # Add newline
  return 0
}

#!/bin/sh

# rcS: init script main file
#    Copyright (C) 2014 Alfredo Mungo <chimeranet89@gmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

###
### Usage: /etc/init.d/rcS {runlevel}
###
### runlevel:		the runlevel in which the system is entering
###
### {} arguments are mandatory, [] arguments are optional
###
### NOTE: To enable logging, create the LOGFILE defined below
### TOOD: Add LOG_FILE size limiting mechanism
###

export PATH="$PATH:/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"
export LOGFILE=/var/log/rc

LOG_MAX_LINES=1000 # Max lines into the logfile

shopt -s nullglob
umask 640 # rw- r-- ---
ulimit -f $((256 * 1024)) # Max file size in KiB
ulimit -u 1024 # Max number of user processes
ulimit -x 256 # Max number of file locks

##
## Send an action to a service
##
## Synopsis: actionService {path} {action}
##
## path:		The full path to the script of the service to send the action to
## action:		The action to send (i.e.: start, stop)
##
function actionService () {
	declare -r path="$1"
	declare -r action="$2"
	declare -r svc=$(basename "$1")
	local msg

	declare -r FMT_SVC="\e[36m"
	declare -r FMT_OK="\e[32m"
	declare -r FMT_WAIT="\e[33m"
	declare -r FMT_ERR="\e[5;31m"
	declare -r FMT_DEFAULT="\e[39m"

	case $action in
	start )
		msg="Starting service"
		;;
	stop )
		msg="Stopping service"
		;;
	* )
		msg="Running action \"$action\" on"
		;;
	esac

	echo "[$RUNLEVEL] ${msg} ${svc}..." >&3

	local msg_full="${msg} ${FMT_SVC}${svc}${FMT_DEFAULT}"

	echo -ne "[ ${FMT_WAIT}PROCESS${FMT_DEFAULT} ] ${msg_full}..."

	local SVC_OUTPUT=$($path $action)

	if [[ $? -eq 0 ]]; then
		echo -e "\r[ ${FMT_OK}SUCCESS${FMT_DEFAULT} ] ${msg_full}..."

		return 0
	else
		echo -e "\r[ ${FMT_ERR}FAILURE${FMT_DEFAULT} ] ${msg_full}..."
		echo "* FAILURE" >&3

		return 1
	fi

	[[ -n "$SVC_OUTPUT" ]] && echo "$SVC_OUTPUT" | sed "s/^/>>> $action: /"
}

##
## Stop a service
##
## Synopsis: stopService {path}
##
## path:		The full path to the script of the service to stop
##
function stopService () {
	local path="$1"

	actionService "$path" stop
}

##
## Start a service
##
## Synopsis: startService {path}
##
## path:		The full path to the script of the service to start
##
function startService () {
	local path="$1"

  "$path" status >/dev/null 2>/dev/null || actionService "$path" start
}

##
## Get values from the INIT INFO block of a service file and prints them
##
## Synopsis: svcGet {val} {path}
##
## path:    The full path to the script of the service to read
## val:     The name of the section to get the value of
##
## NOTE: Only single-line sections are supported
##
function svcGet () {
  declare -r path="$2"
  declare -r section="$1"

  if [[ -r $path ]] && [[ -n $section ]]; then
    awk '/### BEGIN INIT INFO/,/### END INIT INFO/ { print; }' <"$path" | grep -E "^[ \t]*#+[ \t]*$section[ \t]*:" | sed "s/^[#  \t]*$section[ \t]*:[ \t]*//"
  else # Invalid arguments
    echo "svcGet(): Invalid arguments." >&2
  fi
}

##
## Recursively starts all the services related to {service} in SVC_START and
## then run it
##
## Synopsis: svcStartList {service}
##
## service: The root service to start
##
function svcStartList () {
  declare -r service="$1"
  
  for svc in ${SVC_START[@]}; do
    if [[ $svc == $service ]]; then # Needs something to start before it
      for s in ${SVC_START[$service]}; do
        if [[ ${s:0:1} != - ]]; then # Required-Start service
          if ! startService $s; then
            log_error_msg "Service $s required by $service could not be started"
            return 1
          fi
        else # Should-Start
          svcStart ${s:1}
        fi
      done

      startService /etc/init.d/$service
      unset SVC_START[$service]
      return 0
    fi
  done

  return 0
}

# Require RUNLEVEL and PREVLEVEL. Command line overrides default
[[ -n "$1" ]] && export RUNLEVEL=$1

if ( [[ -z "$RUNLEVEL" ]] ||  [[ -z "$PREVLEVEL" ]] ); then
	echo "Only init can run this script." >&2
fi

# Setup redirection
if [[ -f $LOGFILE ]]; then
	if [[ -w $LOGFILE ]]; then
    [[ $(wc -l $LOGFILE) -gt $LOG_MAX_LINES ]] && truncate -s 0 $LOGFILE
		exec 3>>$LOGFILE
	else
		exec 3>/dev/null
	fi
else
	exec 3>/dev/null
fi

# Setup runlevel dir
RUNLEVEL_DIR="/etc/rc${RUNLEVEL}.d"

# Exit if RUNLEVEL_DIR does not exist
[[ ! -d $RUNLEVEL_DIR ]] && exit

# If switching from a previous level, stop the unuseful services
if [[ $PREVLEVEL != N ]]; then
	# Stop services
  declare -A SVC_KILL
	for srv in $RUNLEVEL_DIR/K*; do
		srv=$(basename $(realpath -LP $srv))
    SVC_KILL[$srv]="$(svcGet Required-Stop /etc/init.d/$srv | sed 's/\$//g') $(svcGet Should-Stop /etc/init.d/$srv | sed -e 's/\$//g' -e 's/\([a-zA-Z_]\{1,\}\)/-\1/g)"
	done
fi

# Run the new level services
if [[ -d $RUNLEVEL_DIR ]]; then
  declare -A SVC_START
	for srv in $RUNLEVEL_DIR/S*; do
		srv=$(basename $(realpath -LP $srv))

    SVC_START[$srv]="$(svcGet Required-Start /etc/init.d/$srv | sed 's/\$//g') $(svcGet Should-Start /etc/init.d/$srv | sed -e 's/\$//g' -e 's/\([a-zA-Z_]\{1,\}\)/-\1/g)"
	done
fi

# Remove from the KILL list if still needed
for ksvc in ${SVC_KILL[@]}; do
  for ssvc in ${SVC_START[@]}; do
    if [[ $ksvc == $ssvc ]]; then # Kill svc is also a start svc (should never happen in sane environment)
      unset SVC_KILL[$ksvc]
      continue 2
    else # Kill svc is not in the start list
      for s in ${SVC_START[$ssvc]}; do
        [[ ${s:0:1} == - ]] && s=${s:1}
        if [[ $ksvc == $s ]]; then
          unset SVC_KILL[$ksvc]
          continue 3
        fi
      done
    fi
  done
done

# Limit cycles to avoid cyclic dependencies inite loops
i=0
declare -r LOOP_LIMIT=10000

# Kill services
while [[ -n "${SVC_KILL[@]}" ]]; do
  if [[ $i -gt $LOOP_LIMIT ]]; then
    log_error_msg "Too many iterations, terminating kill phase"
    break
  fi

  let i++

  for ksvc in ${SVC_KILL[@]}; do
    for sksvc in ${SVC_KILL[@]}; do
      slist=${SVC_KILL[$sksvc]}
      
      if echo $slist | grep -qE "(^|[ ]*)$ksvc($|[ ]*)"; then # Service is still needed, skip it
        continue 2
      fi
    done
  
    # Service not needed, kill it
    for s in ${SVC_KILL[$ksvc]}; do
      if [[ ${s:0:1} == - ]]; then # Should-Stop service
        startService /etc/init.d/${s:1}
      else
        if ! startService /etc/init.d/$s; then # Required-Stop service
          log_failure_msg "Unable to start required service $s"
          continue 
        fi
      fi
      
    done
  
    stopService /etc/init.d/$ksvc
    unset SVC_KILL[$ksvc]
  done
done

# Start services
i=0
while [[ -n "${SVC_START[@]}" ]]; do
  if [[ $i -gt $LOOP_LIMIT ]]; then
    log_error_msg "Too many iterations, terminating start phase"
    break
  fi

  let i++

  for svc in ${SVC_START[@]}; do
    svcStartList $svc
  done
done
